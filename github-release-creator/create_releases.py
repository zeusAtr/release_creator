#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –≤ –∫–∞–∂–¥–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
"""

import os
import sys
import requests
from typing import List, Dict, Optional


class GitHubReleaseManager:
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤.
        
        Args:
            token: GitHub Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ repo
        """
        self.token = token
        self.headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        self.base_url = 'https://api.github.com'
    
    def get_latest_tag(self, owner: str, repo: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
        
        Args:
            owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–≥–µ –∏–ª–∏ None
        """
        url = f'{self.base_url}/repos/{owner}/{repo}/tags'
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            tags = response.json()
            if not tags:
                print(f"‚ö†Ô∏è  –ù–µ—Ç —Ç–µ–≥–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {owner}/{repo}")
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥ (—Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            latest_tag = tags[0]
            print(f"‚úì –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {latest_tag['name']} –≤ {owner}/{repo}")
            return latest_tag
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ –∏–∑ {owner}/{repo}: {e}")
            return None
    
    def check_release_exists(self, owner: str, repo: str, tag_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ª–∏–∑ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞.
        
        Args:
            owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        url = f'{self.base_url}/repos/{owner}/{repo}/releases/tags/{tag_name}'
        
        try:
            response = requests.get(url, headers=self.headers)
            return response.status_code == 200
        except requests.exceptions.RequestException:
            return False
    
    def get_commits_since_previous_tag(self, owner: str, repo: str, 
                                       current_tag: str, previous_tag: Optional[str]) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏.
        
        Args:
            owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            current_tag: –¢–µ–∫—É—â–∏–π —Ç–µ–≥
            previous_tag: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
        """
        if not previous_tag:
            return []
        
        url = f'{self.base_url}/repos/{owner}/{repo}/compare/{previous_tag}...{current_tag}'
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            data = response.json()
            return data.get('commits', [])
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã: {e}")
            return []
    
    def generate_release_notes(self, commits: List[Dict], tag_name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤.
        
        Args:
            commits: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
        """
        if not commits:
            return f"Release {tag_name}"
        
        notes = [f"## What's Changed in {tag_name}\n"]
        
        for commit in commits:
            message = commit['commit']['message'].split('\n')[0]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            author = commit['commit']['author']['name']
            sha = commit['sha'][:7]
            notes.append(f"- {message} ({sha}) by @{author}")
        
        notes.append(f"\n**Full Changelog**: {commits[0]['html_url'].rsplit('/', 1)[0]}/compare/{tag_name}")
        
        return '\n'.join(notes)
    
    def create_release(self, owner: str, repo: str, tag_name: str, 
                      name: Optional[str] = None, body: Optional[str] = None,
                      draft: bool = False, prerelease: bool = False) -> Optional[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
        
        Args:
            owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = tag_name)
            body: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
            draft: –°–æ–∑–¥–∞—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
            prerelease: –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–µ-—Ä–µ–ª–∏–∑
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ä–µ–ª–∏–∑–µ –∏–ª–∏ None
        """
        url = f'{self.base_url}/repos/{owner}/{repo}/releases'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–ª–∏–∑
        if self.check_release_exists(owner, repo, tag_name):
            print(f"‚ö†Ô∏è  –†–µ–ª–∏–∑ –¥–ª—è —Ç–µ–≥–∞ {tag_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {owner}/{repo}")
            return None
        
        payload = {
            'tag_name': tag_name,
            'name': name or tag_name,
            'body': body or f'Release {tag_name}',
            'draft': draft,
            'prerelease': prerelease
        }
        
        try:
            response = requests.post(url, headers=self.headers, json=payload)
            response.raise_for_status()
            
            release = response.json()
            print(f"‚úÖ –†–µ–ª–∏–∑ {tag_name} —Å–æ–∑–¥–∞–Ω –≤ {owner}/{repo}")
            print(f"   URL: {release['html_url']}")
            return release
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞ –≤ {owner}/{repo}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
            return None
    
    def process_repository(self, owner: str, repo: str, 
                          auto_notes: bool = True,
                          draft: bool = False,
                          prerelease: bool = False) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑.
        
        Args:
            owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            auto_notes: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
            draft: –°–æ–∑–¥–∞—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
            prerelease: –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–µ-—Ä–µ–ª–∏–∑
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {owner}/{repo}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        latest_tag = self.get_latest_tag(owner, repo)
        if not latest_tag:
            return False
        
        tag_name = latest_tag['name']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        body = None
        if auto_notes:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            url = f'{self.base_url}/repos/{owner}/{repo}/tags'
            try:
                response = requests.get(url, headers=self.headers)
                response.raise_for_status()
                tags = response.json()
                
                previous_tag = tags[1]['name'] if len(tags) > 1 else None
                commits = self.get_commits_since_previous_tag(owner, repo, tag_name, previous_tag)
                body = self.generate_release_notes(commits, tag_name)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
        release = self.create_release(
            owner, repo, tag_name,
            name=tag_name,
            body=body,
            draft=draft,
            prerelease=prerelease
        )
        
        return release is not None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://github.com/settings/tokens")
        print("   –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export GITHUB_TOKEN='your_token'")
        sys.exit(1)
    
    # –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # –§–æ—Ä–º–∞—Ç: ('owner', 'repo')
    repositories = [
        ('owner1', 'repo1'),
        ('owner2', 'repo2'),
        ('owner3', 'repo3'),
        # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∑–¥–µ—Å—å
    ]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    auto_notes = True      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    draft = False          # –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
    prerelease = False     # –û—Ç–º–µ—á–∞—Ç—å –∫–∞–∫ –ø—Ä–µ-—Ä–µ–ª–∏–∑
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ª–∏–∑–æ–≤
    manager = GitHubReleaseManager(github_token)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = 0
    failed = 0
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤...\n")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    for owner, repo in repositories:
        if manager.process_repository(owner, repo, auto_notes, draft, prerelease):
            successful += 1
        else:
            failed += 1
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print(f"\nüìä –ò—Ç–æ–≥–∏:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"   üì¶ –í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repositories)}")


if __name__ == '__main__':
    main()
