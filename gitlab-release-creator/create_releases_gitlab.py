#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö GitLab —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –≤ –∫–∞–∂–¥–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
"""

import os
import sys
import requests
from typing import List, Dict, Optional
from urllib.parse import quote


class GitLabReleaseManager:
    def __init__(self, token: str, gitlab_url: str = 'https://gitlab.com'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤.
        
        Args:
            token: GitLab Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ api
            gitlab_url: URL GitLab –∏–Ω—Å—Ç–∞–Ω—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gitlab.com)
        """
        self.token = token
        self.gitlab_url = gitlab_url.rstrip('/')
        self.headers = {
            'PRIVATE-TOKEN': token,
            'Content-Type': 'application/json'
        }
        self.api_url = f'{self.gitlab_url}/api/v4'
    
    def get_project_id(self, project_path: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –µ–≥–æ –ø—É—Ç–∏.
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (namespace/project)
            
        Returns:
            ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ None
        """
        # URL-encode –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        encoded_path = quote(project_path, safe='')
        url = f'{self.api_url}/projects/{encoded_path}'
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            project = response.json()
            return str(project['id'])
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø—Ä–æ–µ–∫—Ç–∞ {project_path}: {e}")
            return None
    
    def get_latest_tag(self, project_id: str, project_path: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.
        
        Args:
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–≥–µ –∏–ª–∏ None
        """
        url = f'{self.api_url}/projects/{project_id}/repository/tags'
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            tags = response.json()
            if not tags:
                print(f"‚ö†Ô∏è  –ù–µ—Ç —Ç–µ–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_path}")
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥ (—Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            latest_tag = tags[0]
            print(f"‚úì –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {latest_tag['name']} –≤ {project_path}")
            return latest_tag
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ –∏–∑ {project_path}: {e}")
            return None
    
    def check_release_exists(self, project_id: str, tag_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ª–∏–∑ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞.
        
        Args:
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        url = f'{self.api_url}/projects/{project_id}/releases/{tag_name}'
        
        try:
            response = requests.get(url, headers=self.headers)
            return response.status_code == 200
        except requests.exceptions.RequestException:
            return False
    
    def get_commits_since_previous_tag(self, project_id: str, 
                                       current_tag: str, 
                                       previous_tag: Optional[str]) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏.
        
        Args:
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            current_tag: –¢–µ–∫—É—â–∏–π —Ç–µ–≥
            previous_tag: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
        """
        if not previous_tag:
            return []
        
        url = f'{self.api_url}/projects/{project_id}/repository/compare'
        params = {
            'from': previous_tag,
            'to': current_tag
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            data = response.json()
            return data.get('commits', [])
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã: {e}")
            return []
    
    def generate_release_notes(self, commits: List[Dict], tag_name: str, 
                              project_path: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤.
        
        Args:
            commits: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            
        Returns:
            –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
        """
        if not commits:
            return f"Release {tag_name}"
        
        notes = [f"## What's Changed in {tag_name}\n"]
        
        for commit in commits:
            message = commit['message'].split('\n')[0]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            author = commit['author_name']
            short_id = commit['short_id']
            notes.append(f"- {message} ({short_id}) by {author}")
        
        notes.append(f"\n**Full Changelog**: {self.gitlab_url}/{project_path}/-/compare/{tag_name}?from=&to={tag_name}")
        
        return '\n'.join(notes)
    
    def create_release(self, project_id: str, project_path: str, tag_name: str, 
                      name: Optional[str] = None, description: Optional[str] = None,
                      milestones: Optional[List[str]] = None) -> Optional[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑ –≤ –ø—Ä–æ–µ–∫—Ç–µ GitLab.
        
        Args:
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = tag_name)
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
            milestones: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π milestone –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–ª–∏–∑–æ–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ä–µ–ª–∏–∑–µ –∏–ª–∏ None
        """
        url = f'{self.api_url}/projects/{project_id}/releases'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–ª–∏–∑
        if self.check_release_exists(project_id, tag_name):
            print(f"‚ö†Ô∏è  –†–µ–ª–∏–∑ –¥–ª—è —Ç–µ–≥–∞ {tag_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {project_path}")
            return None
        
        payload = {
            'tag_name': tag_name,
            'name': name or tag_name,
            'description': description or f'Release {tag_name}'
        }
        
        if milestones:
            payload['milestones'] = milestones
        
        try:
            response = requests.post(url, headers=self.headers, json=payload)
            response.raise_for_status()
            
            release = response.json()
            print(f"‚úÖ –†–µ–ª–∏–∑ {tag_name} —Å–æ–∑–¥–∞–Ω –≤ {project_path}")
            print(f"   URL: {release['_links']['self']}")
            return release
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞ –≤ {project_path}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
            return None
    
    def process_repository(self, project_path: str, 
                          auto_notes: bool = True,
                          milestones: Optional[List[str]] = None) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç: –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑.
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (namespace/project)
            auto_notes: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
            milestones: –°–ø–∏—Å–æ–∫ milestone –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–ª–∏–∑–æ–º
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {project_path}...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        project_id = self.get_project_id(project_path)
        if not project_id:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        latest_tag = self.get_latest_tag(project_id, project_path)
        if not latest_tag:
            return False
        
        tag_name = latest_tag['name']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        description = None
        if auto_notes:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            url = f'{self.api_url}/projects/{project_id}/repository/tags'
            try:
                response = requests.get(url, headers=self.headers)
                response.raise_for_status()
                tags = response.json()
                
                previous_tag = tags[1]['name'] if len(tags) > 1 else None
                commits = self.get_commits_since_previous_tag(project_id, tag_name, previous_tag)
                description = self.generate_release_notes(commits, tag_name, project_path)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
        release = self.create_release(
            project_id, project_path, tag_name,
            name=tag_name,
            description=description,
            milestones=milestones
        )
        
        return release is not None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    gitlab_token = os.getenv('GITLAB_TOKEN')
    gitlab_url = os.getenv('GITLAB_URL', 'https://gitlab.com')
    
    if not gitlab_token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GITLAB_TOKEN")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://gitlab.com/-/profile/personal_access_tokens")
        print("   –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞: api")
        print("   –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export GITLAB_TOKEN='your_token'")
        print("\n   –î–ª—è self-hosted GitLab —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("   export GITLAB_URL='https://gitlab.your-company.com'")
        sys.exit(1)
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # –§–æ—Ä–º–∞—Ç: 'namespace/project' –∏–ª–∏ 'group/subgroup/project'
    projects = [
        'username/project1',
        'username/project2',
        'group/project3',
        # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –∑–¥–µ—Å—å
    ]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    auto_notes = True      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    milestones = None      # –°–ø–∏—Å–æ–∫ milestone –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['v1.0', 'MVP'])
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ª–∏–∑–æ–≤
    manager = GitLabReleaseManager(gitlab_token, gitlab_url)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = 0
    failed = 0
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –≤ GitLab ({gitlab_url})...\n")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
    for project_path in projects:
        if manager.process_repository(project_path, auto_notes, milestones):
            successful += 1
        else:
            failed += 1
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print(f"\nüìä –ò—Ç–æ–≥–∏:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")


if __name__ == '__main__':
    main()
