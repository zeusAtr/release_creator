#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö GitLab –ø—Ä–æ–µ–∫—Ç–∞—Ö.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
"""

import os
import sys
import argparse
import requests
from typing import List, Dict, Optional
from urllib.parse import quote


class GitLabReleaseManager:
    def __init__(self, token: str, gitlab_url: str = 'https://gitlab.com'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤ GitLab."""
        self.token = token
        self.gitlab_url = gitlab_url.rstrip('/')
        self.headers = {
            'PRIVATE-TOKEN': token,
            'Content-Type': 'application/json'
        }
        self.api_url = f'{self.gitlab_url}/api/v4'
    
    def get_project_id(self, project_path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –µ–≥–æ –ø—É—Ç–∏."""
        encoded_path = quote(project_path, safe='')
        url = f'{self.api_url}/projects/{encoded_path}'
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            project = response.json()
            return str(project['id'])
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø—Ä–æ–µ–∫—Ç–∞ {project_path}: {e}")
            return None
    
    def get_latest_tag(self, project_id: str, project_path: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞."""
        url = f'{self.api_url}/projects/{project_id}/repository/tags'
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            tags = response.json()
            if not tags:
                print(f"‚ö†Ô∏è  –ù–µ—Ç —Ç–µ–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_path}")
                return None
            
            latest_tag = tags[0]
            print(f"‚úì –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {latest_tag['name']} –≤ {project_path}")
            return latest_tag
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ –∏–∑ {project_path}: {e}")
            return None
    
    def check_release_exists(self, project_id: str, tag_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ª–∏–∑ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞."""
        url = f'{self.api_url}/projects/{project_id}/releases/{tag_name}'
        
        try:
            response = requests.get(url, headers=self.headers)
            return response.status_code == 200
        except requests.exceptions.RequestException:
            return False
    
    def get_commits_since_previous_tag(self, project_id: str, 
                                       current_tag: str, 
                                       previous_tag: Optional[str]) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏."""
        if not previous_tag:
            return []
        
        url = f'{self.api_url}/projects/{project_id}/repository/compare'
        params = {
            'from': previous_tag,
            'to': current_tag
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            data = response.json()
            return data.get('commits', [])
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã: {e}")
            return []
    
    def generate_release_notes(self, commits: List[Dict], tag_name: str, 
                              project_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤."""
        if not commits:
            return f"Release {tag_name}"
        
        notes = [f"## What's Changed in {tag_name}\n"]
        
        for commit in commits:
            message = commit['message'].split('\n')[0]
            author = commit['author_name']
            short_id = commit['short_id']
            notes.append(f"- {message} ({short_id}) by {author}")
        
        notes.append(f"\n**Full Changelog**: {self.gitlab_url}/{project_path}/-/compare/{tag_name}?from=&to={tag_name}")
        
        return '\n'.join(notes)
    
    def create_release(self, project_id: str, project_path: str, tag_name: str, 
                      name: Optional[str] = None, description: Optional[str] = None,
                      milestones: Optional[List[str]] = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑ –≤ –ø—Ä–æ–µ–∫—Ç–µ GitLab."""
        url = f'{self.api_url}/projects/{project_id}/releases'
        
        if self.check_release_exists(project_id, tag_name):
            print(f"‚ö†Ô∏è  –†–µ–ª–∏–∑ –¥–ª—è —Ç–µ–≥–∞ {tag_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {project_path}")
            return None
        
        payload = {
            'tag_name': tag_name,
            'name': name or tag_name,
            'description': description or f'Release {tag_name}'
        }
        
        if milestones:
            payload['milestones'] = milestones
        
        try:
            response = requests.post(url, headers=self.headers, json=payload)
            response.raise_for_status()
            
            release = response.json()
            print(f"‚úÖ –†–µ–ª–∏–∑ {tag_name} —Å–æ–∑–¥–∞–Ω –≤ {project_path}")
            release_url = f"{self.gitlab_url}/{project_path}/-/releases/{tag_name}"
            print(f"   URL: {release_url}")
            return release
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞ –≤ {project_path}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
            return None
    
    def process_repository(self, project_path: str, 
                          auto_notes: bool = True,
                          milestones: Optional[List[str]] = None) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç."""
        print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {project_path}...")
        
        project_id = self.get_project_id(project_path)
        if not project_id:
            return False
        
        latest_tag = self.get_latest_tag(project_id, project_path)
        if not latest_tag:
            return False
        
        tag_name = latest_tag['name']
        
        description = None
        if auto_notes:
            url = f'{self.api_url}/projects/{project_id}/repository/tags'
            try:
                response = requests.get(url, headers=self.headers)
                response.raise_for_status()
                tags = response.json()
                
                previous_tag = tags[1]['name'] if len(tags) > 1 else None
                commits = self.get_commits_since_previous_tag(project_id, tag_name, previous_tag)
                description = self.generate_release_notes(commits, tag_name, project_path)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏: {e}")
        
        release = self.create_release(
            project_id, project_path, tag_name,
            name=tag_name,
            description=description,
            milestones=milestones
        )
        
        return release is not None


def load_projects_from_file(file_path: str) -> List[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
    """
    projects = []
    
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return projects
    
    with open(file_path, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not line or line.startswith('#'):
                continue
            
            # –î–ª—è GitLab –º–æ–∂–µ–º –∏–º–µ—Ç—å: username/project, group/project, group/subgroup/project
            if '/' in line:
                projects.append(line)
            else:
                print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 'namespace/project' - '{line}'")
    
    return projects


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –≤ GitLab –ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
  %(prog)s -f projects.txt

  # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
  %(prog)s -p username/project1 group/project2

  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å self-hosted GitLab
  %(prog)s -f projects.txt -u https://gitlab.company.com

  # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑—ã –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫
  %(prog)s -p username/project --no-auto-notes

  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
  %(prog)s -f projects.txt -t glpat-yourtoken123

  # –°–≤—è–∑–∞—Ç—å —Ä–µ–ª–∏–∑—ã —Å milestone
  %(prog)s -f projects.txt -m "v1.0" "MVP"
        """
    )
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    source_group = parser.add_mutually_exclusive_group(required=True)
    source_group.add_argument(
        '-f', '--file',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: namespace/project)'
    )
    source_group.add_argument(
        '-p', '--projects',
        nargs='+',
        help='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: namespace/project group/project)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitLab
    parser.add_argument(
        '-u', '--url',
        default='https://gitlab.com',
        help='URL GitLab –∏–Ω—Å—Ç–∞–Ω—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://gitlab.com)'
    )
    parser.add_argument(
        '-t', '--token',
        help='GitLab Personal Access Token (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ GITLAB_TOKEN)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ª–∏–∑–∞
    parser.add_argument(
        '--no-auto-notes',
        action='store_true',
        help='–ù–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤'
    )
    parser.add_argument(
        '-m', '--milestones',
        nargs='+',
        help='–°–ø–∏—Å–æ–∫ milestone –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–ª–∏–∑–æ–º'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    return parser.parse_args()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    args = parse_arguments()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    gitlab_token = args.token or os.getenv('GITLAB_TOKEN')
    if not gitlab_token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω GitLab —Ç–æ–∫–µ–Ω")
        print("   –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ -t –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GITLAB_TOKEN")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://gitlab.com/-/profile/personal_access_tokens")
        print("   –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞: api")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º URL GitLab
    gitlab_url = args.url or os.getenv('GITLAB_URL', 'https://gitlab.com')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects = []
    
    if args.file:
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {args.file}")
        projects = load_projects_from_file(args.file)
    elif args.projects:
        projects = [p.strip() for p in args.projects]
    
    if not projects:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç{'–æ–≤' if len(projects) != 1 else ''}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    auto_notes = not args.no_auto_notes
    milestones = args.milestones
    
    if args.verbose:
        print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   - GitLab URL: {gitlab_url}")
        print(f"   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏: {'‚úì' if auto_notes else '‚úó'}")
        if milestones:
            print(f"   - Milestones: {', '.join(milestones)}")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ª–∏–∑–æ–≤
    manager = GitLabReleaseManager(gitlab_token, gitlab_url)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = 0
    failed = 0
    skipped = 0
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –≤ GitLab ({gitlab_url})...")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
    for project_path in projects:
        try:
            result = manager.process_repository(project_path, auto_notes, milestones)
            if result:
                successful += 1
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω
                project_id = manager.get_project_id(project_path)
                if project_id:
                    tag = manager.get_latest_tag(project_id, project_path)
                    if tag and manager.check_release_exists(project_id, tag['name']):
                        skipped += 1
                    else:
                        failed += 1
                else:
                    failed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {project_path}: {e}")
            failed += 1
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print(f"\nüìä –ò—Ç–æ–≥–∏:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}")
    if skipped > 0:
        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
    
    sys.exit(0 if failed == 0 else 1)


if __name__ == '__main__':
    main()
